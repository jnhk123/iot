새로운 user 를 생성한다.
>sqlplus system/0000
SQL> create user iot identified by iot;
권한부여
SQL> grant dba to iot;
 
sqldeveloper 에서 iot user에 대한 접속을 만든다.

고객관리 -------------------------------
create table customer(
id		 number constraint customer_id_pk primary key,
name	 varchar2(50) not null,
gender	 varchar2(3) default '남' not null,
email	 varchar2(50),
phone	 varchar2(13) 
);

alter table customer 
add constraint customer_id_pk primary key(id);

customer 테이블의  id 컬럼에 적용한 시퀀스
create sequence seq_customer
start with 1 increment by 1;


customer 테이블의  id 컬럼에 
시퀀스값을 자동으로 적용되게 할 트리거
create or replace trigger trg_customer
	before insert on customer
	for each row
begin
	select seq_customer.nextval into :new.id from dual;
end;
/ 

필요한 라이브러리들은 pom.xml 에 
dependency 태그로 등록한다.
: 공공저장소에서 다운로드한다. : mvnrepository.com



DB 연결을 위한 라이브러리
1. spring 프레임웤과 DB와 연결하기 위한 라이브러리
   : spring-jdbc
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>5.1.4.RELEASE</version>
</dependency>

2. DBCP(DataBase Connection Pool) 라이브러리
<!-- https://mvnrepository.com/artifact/commons-dbcp/commons-dbcp -->
<dependency>
    <groupId>commons-dbcp</groupId>
    <artifactId>commons-dbcp</artifactId>
    <version>1.4</version>
</dependency>

3. Oracle 라이브러리 : maven.jahia.org/maven2
   : 공공저장소에 없으므로 다른 저장소에서 다운로드하도록 등록한다.
   com/oracle/ojdbc6/12.1.0.2/
   
   
Mybatis 프레임웤 관련된 라이브러리
   
4. Mybatis 라이브러리
<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis</artifactId>
    <version>3.4.6</version>
</dependency>

5. 스프링과 Mybatis 를 연결할 라이브러리
<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring -->
<dependency>
    <groupId>org.mybatis</groupId>
    <artifactId>mybatis-spring</artifactId>
    <version>1.3.2</version>
</dependency>

DB연결 설정 데이터를 등록한다. - db.properties



태그를 통해서 객체를 생성해 메모리에 올린다. -> Bean(빈)


화면에서의 사용자의 행위에 의한 요청
-> Controller 
   요청에 대한 매핑 @RequestMapping("/요청uri") 를 지정한
   메소드를 선언한다.
   
	Service 
	-> Interface 를 작성한 후
   	Interface를 구현하는 클래스를 작성하여
   	Controller 의 메소드내에서 해당 객체의 메소드를 호출
   	
   		-> DAO 를 작성한 후
   		   쿼리문 실행 메소드 호출
   		   -> mapper 의 태그를 찾아가 실행
   		   
   		   -> mapper 파일에 태그 선언
   		     
      
Controller -> Service -> DAO -> mapper

DI(Dependency Injection)



화면의 템플릿을 만들어 화면연결은 템플릿화면으로 연결한다.
Tiles  라이브러리: mvnrepository.com
<!-- https://mvnrepository.com/artifact/org.apache.tiles/tiles-jsp -->
<dependency>
    <groupId>org.apache.tiles</groupId>
    <artifactId>tiles-jsp</artifactId>
    <version>3.0.5</version>
</dependency>



공지글 ----------------------
create table notice(
id			number 
				constraint notice_id_pk primary key,
title	 	varchar2(300) not null,
content		varchar2(4000) not null,
writer		varchar2(50) not null,
writedate	date default sysdate,
readcnt		number default 0,
filename	varchar2(300),
filepath	varchar2(600),
root		number /* 원글의 id */,
step		number default 0 /* 답글작성시의 순서 */,
indent		number default 0 /* 들여쓰기 정도 */				
);

notice 테이블에 filename과 filepath  컬럼 추가하기
alter table notice
add ( filename	varchar2(300), 
      filepath	varchar2(600)	);

alter table notice
add ( root		number,
	  step		number default 0,
	  indent	number default 0 );	

root 에 id 값을 저장한다.
update notice set root = id;
트리거를 사용하지 않도록 처리한다.
alter trigger trg_notice disable;

create sequence seq_notice
start with 1 increment by 1;

create or replace trigger trg_notice
	before insert on notice
	for each row
begin
	select seq_notice.nextval into :new.id from dual;
end;
/

----------------------------- 

파일 업로드 라이브러리
: mvnrepository.com 에서 fileupload 검색
<!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload -->
<dependency>
    <groupId>commons-fileupload</groupId>
    <artifactId>commons-fileupload</artifactId>
    <version>1.4</version>
</dependency>

notice 테이블에 페이지테스트를 위해 데이터를 저장한다
insert into notice(id, title, content,writer, writedate,
readcnt, filename, filepath, root)
(select seq_notice.nextval, title, content, writer, writedate,
readcnt, filename, filepath, seq_notice.currval
from notice);


회원정보 ----------------------
create table member(
userid		varchar2(50) constraint member_userid_pk primary key,
userpwd		raw(100) not null,
name		varchar2(50) not null,
gender		varchar2(3) default '남' not null,
email		varchar2(50) not null,
birth		date,
phone		varchar2(13),
post		varchar2(7),
address		varchar2(300),
admin		varchar2(1) default 'N' /* Y/N */ 
);

alter table member 
add (admin		varchar2(1) default 'N');
관리자회원 등록
insert into member(userid, userpwd, name, email, admin)
values ('admin', fn_encrypt('Manager1'), '관리자', 'admin@hanuledu.co.kr', 'Y');
commit;


암호화함수
create or replace function 
	fn_encrypt(input varchar2, key varchar2 := 'iot20190411')
return raw is
	input_raw raw(100);
	key_raw raw(100);
begin
	-- 입력한 문자, 키를 raw 타입으로 변환
	input_raw := utl_i18n.string_to_raw( input, 'AL32UTF8' );
	key_raw := utl_i18n.string_to_raw( key, 'AL32UTF8' );
	-- 암호화슈트: dbms_crypto.des_cbc_pkcs5
	return dbms_crypto.encrypt( src=> input_raw,
	                     key=> key_raw,
	                     typ=> dbms_crypto.des_cbc_pkcs5  );
end;
/
select fn_encrypt('abc') from dual;

복호화함수
create or replace function 
		fn_decrypt( input_raw varchar2, 
					key varchar2 := 'iot20190411' ) 
return varchar2 is
	key_raw raw(100);
begin
	--키를 raw 타입으로 변환
	key_raw := utl_i18n.string_to_raw( key, 'AL32UTF8' );
	-- raw 타입의 데이터를 반환, raw 타입을 문자로 변환
	return utl_i18n.raw_to_char(
	dbms_crypto.decrypt( src=> input_raw,
						 typ=> dbms_crypto.des_cbc_pkcs5,
						 key=> key_raw ), 'AL32UTF8' );
end;
/


방명록 -----------------------------------
create table board(
	id			number constraint board_id_pk primary key,
	userid		varchar2(50) not null,
	title		varchar2(300) not null,
	content		varchar2(4000) not null,
	writedate	date default sysdate,
	readcnt		number default 0,
	filename	varchar2(300),
	filepath	varchar2(300)
);

create sequence seq_board
start with 1 increment by 1;

create or replace trigger trg_board
	before insert on board
	for each row
begin
	select seq_board.nextval into :new.id from dual;
end;
/
----------------------------------------

방명록에 대한 댓글 --------------------------
create table board_comment(
id			number,
userid		varchar2(50),
content		varchar2(4000),
writedate	date default sysdate,
board_id	number,
constraint board_comment_id_pk primary key(id),
constraint board_comment_userid_fk foreign key(userid)
						references member(userid) on delete cascade,
constraint board_comment_board_id foreign key(board_id)
						references board(id) on delete cascade										
);

create sequence seq_board_comment
start with 1 increment by 1;

create or replace trigger trg_board_comment
	before insert on board_comment
	for each row
begin
	select seq_board_comment.nextval into :new.id from dual;
end;
/
----------------------------------------


					 












	

















